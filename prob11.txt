from tensorflow.keras.layers import Input, Dense, Flatten, Conv2D, MaxPool2D
from tensorflow.keras.models import Model
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import numpy as np

def build_model():
  inputs = Input((28,28,1))
  x = Conv2D(4,(2,2),strides=(2,2), padding = 'valid')(inputs)
  x = MaxPool2D(2,2)(x)
  x = Conv2D(4,(2,2),strides=(2,2), padding = 'valid')(x)
  x = MaxPool2D(2,2)(x)
  x =Dense(4, activation = 'sigmoid')(x)
  outputs = Dense(2, activation = 'sigmoid')(x)

  model =Model(inputs, outputs)
  model.summary()

  return model


def prepare_data():
  (trainX,trainY),(testX,testY) = mnist.load_data()
  print(trainX.shape, trainY.shape, testX.shape, testY.shape)

  train_index = np.argwhere(trainY<2)
  test_index = np.argwhere(testY<2)
  train_index = np.squeeze(train_index)
  test_index  = np.squeeze(test_index)

  trainX = trainX[train_index]
  trainY = trainY[train_index]
  testX = testX[test_index]
  testY = testY[test_index]

  classN =2
  trainY = to_categorical(trainY, classN)
  testY = to_categorical(testY, classN)
  
  trainX = trainX.astype(np.float32)
  testX = testX.astype(np.float32)
  trainX /=255
  testX /=255

  return trainX, trainY,testX,testY

  
 
def main():
  trainX,trainY,testX,testY = prepare_data()

  model = build_model()

  model.compile(loss = 'mse', optimizer = 'rmsprop')
  model.fit(trainX,trainY, epochs = 10, validation_split =0.2)
  model.compile(metrics = 'accuracy')
  model.evaluate(testX,testY)

if __name__ == "__main__":
  main()